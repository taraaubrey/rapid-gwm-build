# TODO
# - how does Simulation know that it needs a discretization module?
# - how does Simulation know what a tdis module is?
module_templates:
    sim:
        # runtime_dependencies: #TODO: this is a special list of required minimum packages if this module is built
        #     - gwf
        #     - tdis
        #     - ims
        type: BasicModule
        cmd: 'flopy.mf6.MFSimulation'
        duplicates_allowed: False

    tdis:
        type: TimeDiscretizationModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            sim: simulation
        # parameters:
        #     period_data: ['nper', 'perlen', 'nstp', 'steady'] #TODO: this is a special list of adjustable parameters which are not explicitly called
        cmd: 'flopy.mf6.ModflowTdis'
        duplicates_allowed: False

    ims:
        type: BasicModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            sim: simulation
        cmd: 'flopy.mf6.ModflowIms'
        duplicates_allowed: False


    ## GWF packages ----------------------
    gwf:
        type: BasicModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            sim: simulation
        allowed_to_build_default: True
        cmd: 'flopy.mf6.ModflowGwf'
        duplicates_allowed: True
        runtime_dependencies: ['dis', 'ic', 'npf', 'sto'] #TODO: this is a special list of required minimum packages if a gwf module is built

    npf: 
        type: BasicModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model 
        cmd: 'flopy.mf6.ModflowGwfnpf'
        duplicates_allowed: True

    dis:
        type: SpatialDiscretizationModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model 
        cmd: 'flopy.mf6.ModflowGwfdis'
        duplicates_allowed: False

    ic: 
        type: BasicModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        cmd: 'flopy.mf6.ModflowGwfic'
        duplicates_allowed: False

    sto: 
        
        type: BasicModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        cmd: 'flopy.mf6.ModflowGwfsto'
        duplicates_allowed: False
    ## Simple stress packages ----------------------

    wel:
        type: StressModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        cmd: 'flopy.mf6.ModflowGwfwel'
        duplicates_allowed: True


    drn: 
        type: StressModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        pipe_kwargs: #TODO: this is a special list of adjustable parameters which are not explicitly called
            conductance: from_input
            stress_period_data: stress_period_data
        discretized_data:
            - elevation
            - conductance
        pipes:
            mf6utils.stressdata2external: #this is a function to call
                input:
                    - $discetized_data.elevation
                    - $discetized_data.conductance
                cmd_key: stress_period_data
        cmd: flopy.mf6.ModflowGwfdrn
        duplicates_allowed: True

    ghb:
        type: StressModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        pipe_kwargs: #TODO: this is a special list of adjustable parameters which are not explicitly called
            conductance: from_input
            stress_period_data: stress_period_data
        discretized_data:
            - conductance
        pipes:
            mf6utils.stressdata2external: #this is a function to call
                input:
                    - $discetized_data.conductance
                cmd_key: stress_period_data            
        cmd: 'flopy.mf6.ModflowGwfghb'
        duplicates_allowed: True

    rcha:
        type: StressModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        pipe_kwargs: #TODO: this is a special list of adjustable parameters which are not explicitly called
            recharge: from_input
        discretized_data:
            - recharge
        pipes:
            mf6utils.stressdata2external: #this is a function to call
                input:
                    - $discetized_data.recharge
                cmd_key: stress_period_data
        cmd: 'flopy.mf6.ModflowGwfrcha'
        duplicates_allowed: True


    # ??
    sfr:
        type: StressModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        pipe_kwargs: #TODO: this is a special list of adjustable parameters which are not explicitly called
            rivbotm: from_input
        discretized_data:
            - rivbotm
            - conductance
        pipes:
            mf6utils.stressdata2external: #this is a function to call
                input:
                    - $discetized_data.rivbotm
                    - $discetized_data.conductance
                cmd_key: stress_period_data
        cmd: 'flopy.mf6.ModflowGwfsfr'
        duplicates_allowed: True

    oc:
        type: BasicModule
        build_dependencies: # TODO referencing a module; in the future will need to be some sort of ModuleManager class to get the module
            gwf: model
        cmd: 'flopy.mf6.ModflowGwfoc'
        duplicates_allowed: True